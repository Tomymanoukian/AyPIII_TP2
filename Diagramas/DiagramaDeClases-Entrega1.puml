@startuml

skinparam classAttributeIconSize 0
skinparam shadowing false
hide circle

class Jugador {
    -nombre
    -puntos
    +modificarPuntos (unPuntaje)
}

class Kahoot {
    +evaluarRespuestas(unaPregunta)
    +getPuntajeJugador1()
    +getPuntajeJugador2()
}

abstract class Pregunta {
    -consigna
    {abstract}+evaluarRespuestaPara(unasRespuestas, unJugador)
}

class Respuesta {
    -opcion
    -puntaje
    +aplicarPuntajeA (unJugador)
    +esIgualA (unaOpcion):bool
}

class ListaRespuestas {
    +aplicarPuntajesA(unJugador)
    +obtenerCoincidencias(unaLista):unNumero
    +contieneLoMismo(unaLista):bool
}

abstract class VerdaderoFalso {
    -opcionCorrecta
    -opcionIncorrecta
    +evaluarRespuestaPara(unasRespuestas, unJugador)
}

class VerdaderoFalsoClasico {
    +{static}crearVerdaderoFalsoCorrectaVerdadero(unaConsigna):unVerdaderoFalsoConClasico
    +{static}crearVerdaderoFalsoCorrectaVerdadero(unaConsigna):unVerdaderoFalsoConClasico
    +calcularPuntajePara()
}

class VerdaderoFalsoConPenalidad {
    +{static}crearVerdaderoFalsoCorrectoFalso(unaConsigna):unVerdaderoFalsoConPenalidad
    +{static}crearVerdaderoFalsoCorrectoVerdadero(unaConsigna):unVerdaderoFalsoConPenalidad
}

class MultipleChoiceClasico {
    +calcularPuntajePara(unasRespuestas):unNumero
    +evaluarRespuestaPara(unasRespuestas, unJugador)
}

class MultipleChoiceParcial {
    +aplicarPuntajePara(unasRespuestas, unJugador)
    +evaluarRespuestaPara(unasRespuestas, unJugador)
}

Pregunta <|-- VerdaderoFalso
Pregunta <|--- MultipleChoiceClasico
Pregunta <|--- MultipleChoiceParcial

MultipleChoiceClasico --> "2    " ListaRespuestas
MultipleChoiceParcial --> "2  " ListaRespuestas

VerdaderoFalso <|-- VerdaderoFalsoClasico
VerdaderoFalso <|-- VerdaderoFalsoConPenalidad

Jugador " 2" <- Kahoot
Respuesta "2..*" <-- Pregunta
Kahoot .> Pregunta
Respuesta "2    " <-- Kahoot

Respuesta " 1..*" <----- ListaRespuestas

@enduml